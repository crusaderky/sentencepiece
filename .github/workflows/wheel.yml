name: Build Wheels

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  pull_request:
  workflow_dispatch: # allows to trigger/restart manually

permissions:
  contents: read

jobs:
  build-wheels:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: Build wheels on ${{ matrix.os }}

    permissions:
      contents: write # svenstaro/upload-release-action 

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.12"  # FIXME 3.13 causes random failures on Windows

      - name: Build for Windows
        if: runner.os == 'Windows'
        run: |
          cmake -A Win32 -B ${{github.workspace}}/build_win32 -DSPM_ENABLE_SHARED=OFF -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/root_win32
          cmake --build ${{github.workspace}}/build_win32 --config Release --target install --parallel 8
          cmake -A x64   -B ${{github.workspace}}/build_amd64 -DSPM_ENABLE_SHARED=OFF -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/root_amd64
          cmake --build ${{github.workspace}}/build_amd64 --config Release --target install --parallel 8
          cmake -A arm64 -B ${{github.workspace}}/build_arm64 -DSPM_ENABLE_SHARED=OFF -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/root_arm64
          cmake --build ${{github.workspace}}/build_arm64 --config Release --target install --parallel 8

      - name: Build for Mac
        if: runner.os == 'macOS'
        run: |
          cmake -B ${{github.workspace}}/build -DSPM_ENABLE_SHARED=OFF -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/build/root
          cmake --build ${{github.workspace}}/build --config Release --target install --parallel 8
        env:
          CMAKE_OSX_ARCHITECTURES: arm64;x86_64

      - name: Install cibuildwheel
        working-directory: python
        run: |
          python -m pip install --require-hashes --no-dependencies -r ../.github/workflows/requirements/base.txt
          python -m pip install --require-hashes --no-dependencies -r ../.github/workflows/requirements/cibuildwheel.txt

      - name: Replace symlinks
        run: |
          # Replace external symlinks with copies to avoid issues with cibuildwheel
          rm python/test/botchan.txt
          cp data/botchan.txt python/test/

      - name: Build sdist archive
        # NOTE: this also causes binary wheels to be built against the currenty
        # checked out C++ code instead of main git tip; see build_bundled.sh.
        working-directory: python
        run: sh build_sdist.sh

      - name: Validate sdist archive
        run: twine check --strict python/dist/*.tar.gz

      - name: Build wheel from sdist
        shell: bash
        run: python -m pip wheel python/dist/*.tar.gz --verbose

      - name: Copy sdist
        working-directory: python
        if: runner.os == 'macOS'
        run: |
          mkdir -p wheelhouse
          cp -f dist/*.tar.gz wheelhouse/

      - name: Build wheels
        working-directory: python
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_LINUX: auto
          CIBW_ARCHS_MACOS: x86_64 universal2 arm64
          CIBW_ARCHS_WINDOWS: auto ARM64
          CIBW_SKIP: pp* *-musllinux_*
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENABLE: cpython-freethreading
          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {project}/test

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: artifacts-${{ matrix.os }}
          path: python/wheelhouse/*

      - name: Upload wheel release
        if: startsWith(github.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # v2.9.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./python/wheelhouse/*
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
          file_glob: true

  free-threading:
    needs: [build-wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          sparse-checkout: |
            python/test
            data/botchan.txt

      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.13t"

      - name: Download all artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: python/wheelhouse
          merge-multiple: true

      - name: Install sentencepiece wheel
        run: pip install --find-links=python/wheelhouse sentencepiece

      - name: Install test dependencies
        run: pip install pytest pytest-run-parallel
      
      - name: Run free-threading tests
        working-directory: python
        env:
          PYTHON_GIL: 0   # TODO regenerate SWIG with -threads flag
        run: pytest -Werror --parallel-threads 4

  gather-digests:
    needs: [build-wheels]
    outputs:
      digests: ${{ steps.hash.outputs.digests }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: python/wheelhouse
          merge-multiple: true

      - name: List artifacts
        run: ls -l python/wheelhouse

      - name: Generate SLSA subjects
        id: hash
        run: echo "digests=$(sha256sum python/wheelhouse/* | base64 -w0)" >> $GITHUB_OUTPUT

  provenance:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [gather-digests]
    permissions:
      actions: read   # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.gather-digests.outputs.digests }}"
      upload-assets: true # Optional: Upload to a new release
